// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mentor        Mentor?
  menteeRequests MentorshipRequest[] @relation("Mentee")
}

model Mentor {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String
  expertise   String[]
  experience  Int
  hourlyRate  Float?
  available   Boolean   @default(true)
  mentorshipRequests MentorshipRequest[] @relation("Mentor")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MentorshipRequest {
  id          String    @id @default(cuid())
  mentorId    String
  menteeId    String
  status      String    @default("PENDING") // PENDING, ACCEPTED, REJECTED, COMPLETED
  message     String
  mentor      Mentor    @relation("Mentor", fields: [mentorId], references: [id])
  mentee      User      @relation("Mentee", fields: [menteeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
