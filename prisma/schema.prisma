// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MENTOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String?
  firstName     String
  lastName      String
  role          UserRole  @default(USER)
  image         String?
  bio           String?
  skills        String[]
  expertise     String[]
  country       String?
  experience    Int?
  hourlyRate    Float?
  title         String?
  company       String?
  availability  Int?      // hours per week
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  isProfileComplete Boolean @default(false)
  subscribed    Boolean   @default(false)
  mentorAvailability MentorAvailability[]
  mentorBookings     Booking[]  @relation("MentorBookings")
  menteeBookings     Booking[]  @relation("MenteeBookings")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MentorAvailability {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  mentorId    String   @db.ObjectId
  dayOfWeek   Int      // 0-6 for Sunday-Saturday
  startTime   String   // Format: "HH:mm"
  endTime     String   // Format: "HH:mm"
  timeZone    String   // e.g., "America/New_York"
  mentor      User     @relation(fields: [mentorId], references: [id])
  bookings    Booking[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([mentorId])
}

model Booking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  mentorId     String   @db.ObjectId
  menteeId     String   @db.ObjectId
  availabilityId String @db.ObjectId
  startTime    DateTime
  endTime      DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed
  timeZone     String
  mentor       User     @relation("MentorBookings", fields: [mentorId], references: [id])
  mentee       User     @relation("MenteeBookings", fields: [menteeId], references: [id])
  availability MentorAvailability @relation(fields: [availabilityId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([mentorId])
  @@index([menteeId])
  @@index([availabilityId])
}
